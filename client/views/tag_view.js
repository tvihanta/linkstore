// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin','views/base/view', 'text!templates/tags.hbs'], function(Chaplin,View, template) {
  'use strict';

  var TagView;
  return TagView = (function(_super) {

    __extends(TagView, _super);

    function TagView() {
      return TagView.__super__.constructor.apply(this, arguments);
    }

    TagView.prototype.template = template;
    TagView.prototype.initialize = function(){
        console.log("tagsview.initialize");
        Chaplin.mediator.subscribe('refreshView', function(){this.$el.remove(); this.render();}, this);
        TagView.__super__.initialize.apply(this, arguments);
        this.delegate("click", ".edit-tag", this.showEdit);
        this.delegate("change", ".tag-input", this.tagChange);
    };

   // template = null;
    TagView.prototype.showEdit = function(e){
        var elem = $(e.currentTarget).parent();
        console.log(elem);
        $(".tag-text", elem).toggle();
        $(".tag-input-cont",elem).toggle();
    };
    TagView.prototype.tagChange = function(e){
        var elem = $(e.currentTarget);
        console.log(elem);
        var id = elem.data("id");
        var modl = this.collection.get(id);
        modl.set('tag', elem.val());
        modl.save();
        Chaplin.mediator.publish("refreshView");
    };
    TagView.prototype.className = 'tags';
    TagView.prototype.container = '#tag-container';
    TagView.prototype.autoRender = true;

    return TagView;

  })(View);
});
