// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin','views/base/view', 'models/base/model', 'text!templates/filter.hbs'], function(Chaplin,View,Model, template) {
  'use strict';

  var FilterView;
  return FilterView = (function(_super) {

    __extends(FilterView, _super);

    function FilterView() {
      return FilterView.__super__.constructor.apply(this, arguments);
    }

    FilterView.prototype.template = template;
    FilterView.prototype.initialize = function(){
        console.log("filter.initialize");
        FilterView.__super__.initialize.apply(this, arguments);
        Chaplin.mediator.subscribe("FilterChange", this.filterChange, this);
    };
    FilterView.prototype.afterRender = function(){
        FilterView.__super__.afterRender.apply(this, arguments);
    };
   // template = null;
    FilterView.prototype.filterChange = function(filter){
        this.collection.reset([new Model({filter:filter})]);
        console.log(filter)
        this.refresh(false);
    };
    FilterView.prototype.className = 'filters';
    FilterView.prototype.container = '#filter-container';
    FilterView.prototype.autoRender = true;

    return FilterView;

  })(View);
});
